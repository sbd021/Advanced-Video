# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

parameters:
  displayName: ''
  workingDirectory: ''
  scheme: ''
  sdkurl: ''
  solutionName: ''

jobs:
  - job: ${{ parameters.displayName }}Build
    displayName: ${{ parameters.displayName }}

    pool:
      vmImage: 'vs2017-win2016'

    variables:
      solution: '${{ parameters.workingDirectory }}/${{ parameters.solutionName }}'
      buildPlatform: 'win32'
      buildConfiguration: 'Release'
   
    steps:
      - script: echo "${{ parameters.sdkurl }}" && ls
      - powershell: Windows/cicd/script/downloadsdk.ps1 "${{ parameters.sdkurl }}"
      - task: DownloadGitHubRelease@0
        inputs: 
          connection: sbd021
          userRepository: sbd021/Advanced-Video
          defaultVersionType: 'latest'
          version: 'hooksdk'
          itemPattern: '*HookSDK.zip*'
          downloadPath: ${{ parameters.workingDirectory }}
      
      - script: echo "DownloadGitHubRelease" && ls
      
      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: ${{ parameters.workingDirectory }}/HookSDK.zip
          destinationFolder: ${{ parameters.workingDirectory }}
          
      - script: ls && cd ${{ parameters.workingDirectory }} && ls && cd ${{ parameters.workingDirectory }}/HookSDK && ls
      
      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: 'AgoraSDK.zip' 
          destinationFolder: 'AgoraSDK'    
          
      - task: CopyFiles@2
        inputs:
          sourceFolder: 'AgoraSDK/Agora_Native_SDK_for_Windows_v2.9.3_FULL/sdk'
          targetFolder: ${{ parameters.workingDirectory }}/sdk
      - script: cd ${{ parameters.workingDirectory }} && ls
              
      - task: VSBuild@1
        inputs:
          solution: '$(solution)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          vsVersion: '15.0'
          msbuildArchitecture: 'x86'
   
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '${{ parameters.workingDirectory }}/Release/'
          includeRootFolder: true
          archiveType: 'zip'
          archiveFile: LiveStreaming.zip
          replaceExistingArchive: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: ${{ parameters.workingDirectory }}/${{ parameters.displayName }}.zip
          ArtifactName: ${{ parameters.displayName }}


      
